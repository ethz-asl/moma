<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="robot_id" default="giraffe" />
  <arg name="controller"
    default="swerve_controller z_axis_controller joint_state_controller"/>
  <arg name="joystick" default="true" />
  <arg name="rviz" default="true"/>

  <!-- Robot Customization -->
  <arg name="arm_id" default="panda" />
  <arg name="use_gripper" default="true" />

  <!-- Start main robot node to connect to hardware from root -->
  <!-- <node name="gmp_robot" pkg="gmp_robot" type="gmp_launcher.sh" -->
    <!-- output="screen" />  -->

  <!-- Load robot description  -->
  <param name="robot_description"
    command="$(find xacro)/xacro $(find moma_description)/urdf/giraffe.urdf.xacro
            use_nominal_extrinsics:=true"/>

  <param name="robot_description_arm"
          command="xacro $(find moma_description)/urdf/panda.urdf.xacro
                  use_nominal_extrinsics:=true
                  gazebo:=true
                  include_control_plugin:=false"/>

  <!-- Arm controllers -->
  <group ns="panda">
    <rosparam file="$(find franka_gazebo)/config/franka_hw_sim.yaml" subst_value="true" />
    <rosparam file="$(find franka_gazebo)/config/sim_controllers.yaml" subst_value="true" />
    <param name="m_ee" value="0.76" if="$(arg use_gripper)" />

    <node pkg="controller_manager"
          type="spawner"
          name="$(arg arm_id)_gripper_spawner"
          if="$(arg use_gripper)"
          args="franka_gripper"
          respawn="false" />

    <node pkg="controller_manager"
          type="spawner"
          name="$(arg arm_id)_controller_spawner"
          respawn="false" output="screen"
          args="--wait-for initialized franka_state_controller effort_joint_trajectory_controller"/>

  </group>

  <!-- Base controllers -->
  <arg name="base_id" default="gmp" />
  <group ns="mobile_base">
    <param name="robot_description"
      command="$(find xacro)/xacro $(find gmp_robot)/urdf/gmp.urdf.xacro
      include_control_plugin:=true multiple_robots:=true"/>

    <remap from="/mobile_base/swerve_controller/cmd_vel" to="/cmd_vel"/>

    <param name="swerve_config_file" value="$(find gmp_robot)/config/platform_description.yaml" />
    <rosparam file="$(find gmp_robot)/config/platform_description.yaml" command="load"/>

    <!-- Spawn required packages  -->
    <arg name="base_controller" default="swerve_controller z_axis_controller joint_state_controller" />
    <include file="$(find gmp_robot)/launch/controller.launch">
      <arg name="controller" default="$(arg base_controller)" />
    </include>

    <!-- Inverting the steering axis on the base -->
    <param name="swerve_controller/invert_steering" type="bool" value="true"/>

  </group>

  <!-- Start the state publisher  -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" 
    type="robot_state_publisher" output="screen" />

  <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher">
    <rosparam param="source_list">
      [panda/franka_state_controller/joint_states,
      panda/franka_gripper/joint_states,
      mobile_base/joint_states]
    </rosparam>
    <param name="rate" value="30"/>
  </node>

  <!-- Spawn the controllers  -->
  <node name="$(arg robot_id)_controller_spawner" 
    pkg="controller_manager" 
    type="spawner" 
    respawn="false"
    output="screen" args="$(arg controller)"/>

  <!-- Load RViz -->
  <node pkg="rviz"
    name="rviz"
    type="rviz"
    args="-d $(find heron_demo)/config/heron_demo.rviz" />

  <group if="$(arg joystick)">
    <!-- Launch the teleoperation node -->
    <include file="$(find gmp_bringup)/launch/teleop.launch">
      <arg name="simulation" default="false" />
    </include>

    <!--Launch the twist publisher muliplexer -->
    <node pkg="twist_mux" type="twist_mux" name="twist_mux">
      <rosparam command="load" file="$(find gmp_bringup)/config/twist_mux.yaml" />
      <remap from="/cmd_vel_out" to="/swerve_controller/cmd_vel"/>
    </node>
  </group>

</launch>
