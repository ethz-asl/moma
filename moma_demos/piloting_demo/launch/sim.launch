<?xml version="1.0"?>
<launch>
  <arg name="gui" default="false" />
  <arg name="rviz" default="true" />
  <arg name="use_fixed_realsense" default="false"/>
  <arg name="tool" default="panda_hand"/>
  <arg name="base_type" default="1"/>

  <!-- load a arm only description for the arm controllers -->
  <param name="arm_description" command="$(find xacro)/xacro $(find moma_description)/urdf/panda.urdf.xacro 
    use_nominal_extrinsics:=true use_fixed_realsense:=false tool:=$(arg tool)"/>

  <!-- spawn panda in siumulation -->
  <include file="$(find piloting_demo)/launch/gazebo.launch">
    <arg name="use_fixed_realsense" value="$(arg use_fixed_realsense)"/>
    <arg name="control_mode" value="Effort"/>
    <arg name="tool" value="$(arg tool)"/>
    <arg name="gui"  value="$(arg gui)"/>
  </include>

  <!-- smb control -->
  <include file="$(find smb_control)/launch/smb_control.launch">
    <arg name="description_name"        value="smb_description"/>
    <arg name="control_namespace"       value="control"/>
    <arg name="robot_namespace"         value=""/>
    <arg name="enable_ekf"              value="false" />
    <arg name="simulation"              value="true"/>
    <arg name="mpc"                     value="false"/>
    <arg name="publish_robot_state"     value="false"/>  <!-- Since we do this in the current launch for the full robot -->
  </include>

  <!-- Publish camera odometry tf-->
  <node pkg="odometry_conversion" type="odometry_conversion_node" name="tracking_camera_odometry_conversion" output="screen"/>

  <group ns="ocs2_mpc">
    <param name="task_file" value="$(find moma_ocs2)/config/mpc/task_panda.info"/>
    <param name="robot_description_ocs2" command="$(find xacro)/xacro $(find moma_description)/urdf/superpanda.urdf.xacro 
      mpc_model:=true use_nominal_extrinsics:=true tool:='none'"/>
    <param name="base_type" value="$(arg base_type)"/>
    <param name="reference_frame" value="tracking_camera_odom"/>
  </group>

  <rosparam file="$(find moma_gazebo)/config/gripper_controllers.yaml" command="load" />

  <group ns="control">
    <group if="$(eval arg('tool') == 'panda_hand')">
      <node name="gripper_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_gripper" />
    </group>

    <group if="$(eval arg('tool') in ['robotiq_2f_85', 'robotiq_2f_toolset'])">
      <node name="gripper_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="robotiq_2f_85_controller" />
    </group>

    <!-- start a robot state publisher -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

    <!-- start joint position trajectory controller -->
    <rosparam file="$(find moma_gazebo)/config/panda_controllers.yaml" command="load" />

    <node name="arm_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_controller effort_joint_trajectory_controller path_passthrough_controller" />
    
    <!-- Add some delay larger then gazebo start delay, otherwise sim stalls -->
    <node name="stopped_controller_spawner" 
          pkg="controller_manager"
          type="spawner" respawn="false" output="screen" 
          args="--stopped joint_space_controller mpc_controller"
          launch-prefix="bash -c 'sleep 20; $0 $@' "/>
  </group>

  <node name="unpause_gazebo" pkg="moma_gazebo" type="unpause_gazebo.py">
    <param name="wait_before_unpause" value="8.0"/>
  </node>

  <!-- launch the base planner -->
  <include file="$(find smb_navigation)/launch/navigate2d_ompl.launch">
    <arg name="sim" value="true"/>
    <arg name="global_frame" value="tracking_camera_odom"/>
  </include>

  <!-- Customer camera info publisher as per real robot -->
  <arg name="intrinsics_file" value="$(find moma_description)/config/intrinsics_sim.yaml"/>
  <node name="camera_intrinsics_publisher" 
        pkg="moma_sensor_tools" 
        type="yaml_to_camera_info_publisher.py" 
        args="$(arg intrinsics_file)" output="screen"/>

  <!-- Perception -->
  <include file="$(find piloting_demo)/launch/perception.launch">
    <arg name="play_bag"          value="false"/>
    <arg name="base_frame"        value="tracking_camera_odom"/>
    <arg name="camera_frame"      value="hand_eye_color_optical_frame"/>
    <arg name="image_topic"       value="/hand_eye/color/image_raw"/>
    <arg name="depth_topic"       value="/hand_eye/depth/image_rect_raw"/>
    <arg name="calibration_topic" value="/camera_info"/>
    <arg name="calibration_file"  value="none"/>
    <arg name="custom_intrinsics" value="false"/>
    <arg name="rviz"              value="false"/>
  </include>


</launch>
