<?xml version="1.0"?>
<launch>
  <!-- Gazebo & GUI Configuration -->
  <arg name="gazebo" default="true" />
  <arg name="headless" default="false" />
  <arg name="paused" default="false" />
  <arg name="world" default="worlds/empty.world" />
  <arg name="rviz" default="true" />

  <!-- Robot Customization -->
  <arg name="robot_id" default="giraffe"/>
  <arg name="arm_id" default="panda" />
  <arg name="use_gripper" default="true" />
  <arg name="moveit" default="true" />
  <arg name="initial_joint_positions"
       default="-J $(arg arm_id)_joint1 0
                -J $(arg arm_id)_joint2 -0.3927
                -J $(arg arm_id)_joint3 0
                -J $(arg arm_id)_joint4 -2.95 
                -J $(arg arm_id)_joint5 0
                -J $(arg arm_id)_joint6 0
                -J $(arg arm_id)_joint7 0.785398163397
                -J $(arg arm_id)_finger_joint1 0.001
                -J $(arg arm_id)_finger_joint2 0.001" />

  <!-- Launch the controller file ?-->
  <arg name="spawn_controllers" default="true" />

  <!-- Base customization -->
  <arg name="mobile_base_x" default="0" />
  <arg name="mobile_base_y" default="0" />
  <arg name="mobile_base_z" default="0.1" />
  <arg name="mobile_base_yaw" default="0" />

  <!-- Remap command velocity topic -->
  <remap from="/mobile_base/cmd_vel" to="/cmd_vel"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch" if="$(arg gazebo)">
    <arg name="world_name" value="$(arg world)"/>
    <arg name="paused" value="true"/>
    <arg name="gui" value="$(eval not arg('headless'))"/>
    <arg name="use_sim_time" value="true"/>
  </include>

  <!-- Load robot description  -->
  <param name="robot_description"
    command="$(find xacro)/xacro $(find moma_description)/urdf/giraffe.urdf.xacro
      publish_realsense_extrinsics:=false include_control_plugin:=false simulation:=true"/> 

  <!-- <param name="robot_description_arm"
          command="xacro $(find moma_description)/urdf/panda.urdf.xacro
                  use_nominal_extrinsics:=true
                  gazebo:=true
                  include_control_plugin:=false"/> -->

  <!-- Arm controllers -->
  <group ns="panda">
    <param name="arm_id" value="$(arg arm_id)" />
    <param name="pipeline" value="ompl" />
    <param name="move_group/default_planning_pipeline" value="ompl" />

    <!-- Load robot description  -->
    <param name="robot_description"
            command="xacro $(find moma_description)/urdf/giraffe.urdf.xacro
                    publish_realsense_extrinsics:=false
                    simulation:=true" />
                    <!-- arm_id:=$(arg arm_id)
                    parent:=franka_mount_link
                    gazebo:=true
                    use_bota:=false
                    include_control_plugin:=false
                    use_fixed_camera:=false
                    use_wrist_camera:=false"/> -->

    <rosparam file="$(find franka_gazebo)/config/franka_hw_sim.yaml" subst_value="true" />
    <rosparam file="$(find franka_gazebo)/config/sim_controllers.yaml" subst_value="true" />
    <param name="m_ee" value="0.76" if="$(arg use_gripper)" />

    <node pkg="controller_manager"
          type="spawner"
          name="$(arg arm_id)_gripper_spawner"
          if="$(arg use_gripper)"
          args="franka_gripper"
          respawn="false" />

    <node pkg="controller_manager"
          type="spawner"
          name="$(arg arm_id)_controller_spawner"
          respawn="false" output="screen"
          args="--wait-for initialized franka_state_controller effort_joint_trajectory_controller"/>

    <include if="$(arg moveit)" file="$(find giraffe_moveit_config)/launch/move_group.launch">
      <arg name="load_robot_description" value="false" />
      <!-- <arg name="load_gripper" value="$(arg use_gripper)"/> -->
      <arg name="pipeline" value="ompl" />
    </include>

  </group>

  <!-- Base controllers -->
  <!-- <arg name="base_id" default="gmp" /> -->
  <group ns="mobile_base">
    <param name="swerve_config_file" value="$(find gmp_robot)/config/platform_description.yaml" />
    <rosparam file="$(find gmp_robot)/config/platform_description.yaml" command="load"/>
    <param name="swerve_controller/invert_steering" type="bool" value="false"/>

    <param name="robot_description"
      command="$(find xacro)/xacro $(find gmp_robot)/urdf/gmp.urdf.xacro
      include_control_plugin:=true multiple_robots:=true simulation:=true"/>

    <!-- Spawn required packages  -->
    <arg name="base_controller" default="swerve_controller z_axis_sim_controller joint_state_controller" />
    <!-- <node name="$(arg robot_id)_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="$(arg base_controller)"/> -->
    <!-- Spawn the controllers  -->
    <group if="$(arg spawn_controllers)">
      <include file="$(find gmp_robot)/launch/controller.launch" >
        <arg name="robot_id" default="$(arg robot_id)"/>
        <arg name="controller" default="$(arg base_controller)"/>
        <arg name="multiple_robots" default="true"/>
      </include>
    </group>
  </group>

  <node name="robot_state_publisher" pkg="robot_state_publisher" 
    type="robot_state_publisher" output="screen" />

  <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher">
    <rosparam param="source_list">
      [panda/franka_state_controller/joint_states,
      panda/franka_gripper/joint_states,
      mobile_base/joint_states]
    </rosparam>
    <param name="rate" value="30"/>
  </node>

  <!-- Launch MoveIt -->
  <!-- <include file="$(find giraffe_moveit_config)/launch/move_group.launch">
    <arg name="load_robot_description" value="false"/>
  </include> -->
  <!-- Spawn giraffe -->
  <arg name="unpause" value="$(eval '' if arg('paused') else '-unpause')" />
  <node name="$(arg arm_id)_model_spawner"
        pkg="gazebo_ros"
        type="spawn_model"
        args="-param robot_description -urdf -model $(arg arm_id) $(arg unpause)
              $(arg initial_joint_positions)
              -x $(arg mobile_base_x) 
              -y $(arg mobile_base_y) 
              -z $(arg mobile_base_z) 
              -Y $(arg mobile_base_yaw)"/>

  <!-- Publish ground truth odom from gazebo -->
  <node name="odom_to_tf" pkg="gmp_utils" type="odom_to_tf.py" output="screen">
    <param name="odom_frame_id" value="odom" />
    <param name="base_frame_id" value="base_footprint" />
  </node>

</launch>